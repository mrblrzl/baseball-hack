{"version":3,"sources":["components/PitcherDropdown/index.js","components/PitcherDropdown/pitchers.js","App.js","serviceWorker.js","index.js"],"names":["PitcherDropdown","props","console","log","react_default","a","createElement","className","type","name","list","placeholder","id","pitchersList","src","alt","pitchers","result","gen_velocity","pitcher_team_id","pitcher_team_abbrev","pitcher","batter_team","distance","top_inning","height","batter_id","game_id","launch_speed","pitcher_id","pitcher_last_init","batter_last_init","game_date","pitcher_team","inning","game_pk","batter","batter_team_id","pitch_speed","launch_angle","trajectory","batter_team_abbrev","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","getPitchers","pitcherList","map","index","key","setState","state","components_PitcherDropdown","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d60aaeb2.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst PitcherDropdown = (props) => {\r\n    console.log(\"map list \" + props)\r\n    return (\r\n        <div className=\"pitcher-card\">\r\n            <div className=\"form-input\">\r\n                <input className=\"\" type=\"text\" name=\"pittcher\" list=\"pittcherList\" placeholder=\"Select Your Pitcher\" />\r\n                <datalist id=\"pittcherList\"> {props.pitchersList} </datalist>\r\n            </div>\r\n            <div className=\"card\">\r\n                    <img src=\"img_avatar.png\" alt=\"\" />\r\n                    <div className=\"card-container\">\r\n                    </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PitcherDropdown","const pitchers = [\r\n    {\r\n    \"result\": \"home_run\",\r\n    \"gen_velocity\": \"10.52\",\r\n    \"pitcher_team_id\": \"119\",\r\n    \"pitcher_team_abbrev\": \"LAD\",\r\n    \"pitcher\": \"Kershaw, Clayton\",\r\n    \"batter_team\": \"Mets\",\r\n    \"distance\": \"414.59\",\r\n    \"top_inning\": \"Y\",\r\n    \"height\": \"87.02\",\r\n    \"batter_id\": \"502517\",\r\n    \"game_id\": \"2015/10/09/nynmlb-lanmlb-1\",\r\n    \"launch_speed\": \"104.92\",\r\n    \"pitcher_id\": \"477132\",\r\n    \"pitcher_last_init\": \"Kershaw, C\",\r\n    \"batter_last_init\": \"Murphy, D\",\r\n    \"game_date\": \"2015-10-09T00:00:00\",\r\n    \"pitcher_team\": \"Dodgers\",\r\n    \"inning\": \"4\",\r\n    \"game_pk\": \"446244\",\r\n    \"batter\": \"Murphy, Daniel\",\r\n    \"batter_team_id\": \"121\",\r\n    \"pitch_speed\": \"94.41\",\r\n    \"launch_angle\": \"26.85\",\r\n    \"trajectory\": \"line_drive\",\r\n    \"batter_team_abbrev\": \"NYM\"\r\n    },\r\n    {\r\n    \"result\": \"home_run\",\r\n    \"gen_velocity\": \"14.13\",\r\n    \"pitcher_team_id\": \"121\",\r\n    \"pitcher_team_abbrev\": \"NYM\",\r\n    \"pitcher\": \"deGrom, Jacob\",\r\n    \"batter_team\": \"Cubs\",\r\n    \"distance\": \"424.45\",\r\n    \"top_inning\": \"N\",\r\n    \"height\": \"62.74\",\r\n    \"batter_id\": \"624585\",\r\n    \"game_id\": \"2015/10/20/nynmlb-chnmlb-1\",\r\n    \"launch_speed\": \"110.19\",\r\n    \"pitcher_id\": \"594798\",\r\n    \"pitcher_last_init\": \"deGrom, J\",\r\n    \"batter_last_init\": \"Soler, J\",\r\n    \"game_date\": \"2015-10-20T00:00:00\",\r\n    \"pitcher_team\": \"Mets\",\r\n    \"inning\": \"4\",\r\n    \"game_pk\": \"446265\",\r\n    \"batter\": \"Soler, Jorge\",\r\n    \"batter_team_id\": \"112\",\r\n    \"pitch_speed\": \"96.06\",\r\n    \"launch_angle\": \"20.56\",\r\n    \"trajectory\": \"fly_ball\",\r\n    \"batter_team_abbrev\": \"CHC\"\r\n    },\r\n    {\r\n    \"result\": \"home_run\",\r\n    \"gen_velocity\": \"20.99\",\r\n    \"pitcher_team_id\": \"141\",\r\n    \"pitcher_team_abbrev\": \"TOR\",\r\n    \"pitcher\": \"Price, David\",\r\n    \"batter_team\": \"Royals\",\r\n    \"distance\": \"405.74\",\r\n    \"top_inning\": \"N\",\r\n    \"height\": \"51.58\",\r\n    \"batter_id\": \"519058\",\r\n    \"game_id\": \"2015/10/23/tormlb-kcamlb-1\",\r\n    \"launch_speed\": \"109.20\",\r\n    \"pitcher_id\": \"456034\",\r\n    \"pitcher_last_init\": \"Price, D\",\r\n    \"batter_last_init\": \"Moustakas, M\",\r\n    \"game_date\": \"2015-10-23T00:00:00\",\r\n    \"pitcher_team\": \"Blue Jays\",\r\n    \"inning\": \"2\",\r\n    \"game_pk\": \"446269\",\r\n    \"batter\": \"Moustakas, Mike\",\r\n    \"batter_team_id\": \"118\",\r\n    \"pitch_speed\": \"88.21\",\r\n    \"launch_angle\": \"17.87\",\r\n    \"trajectory\": \"line_drive\",\r\n    \"batter_team_abbrev\": \"KC\"\r\n    },\r\n]\r\n\r\nexport default pitchers;","import React, { Component } from 'react';\nimport './App.css';\nimport PitcherDropdown from './components/PitcherDropdown';\nimport pitchers from \"./components/PitcherDropdown/pitchers\";\nimport UserStats from './components/UserStats';\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { pitchersList: [] };\n  }\n\n  componentDidMount = () => {\n    this.getPitchers()\n    }\n    getPitchers = () => {\n    \n    \n    const pitcherList = pitchers.map((pitcher, index) => {\n    return <option key={index} >{pitcher.pitcher}</option>\n    })\n    \n    console.log(pitcherList)\n    \n    this.setState((state, props) => {\n    return { pitchersList: pitcherList };\n    });\n    }\n\n  render() {\n    return (\n      <div className=\"container\">\n      <div className=\"right\">\n       <h1>Step up to the plate!</h1>\n      </div>\n      <div className=\"left\">\n        <h1>Choose your pitcher</h1>\n        < PitcherDropdown pitchersList={this.state.pitchersList}/>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}